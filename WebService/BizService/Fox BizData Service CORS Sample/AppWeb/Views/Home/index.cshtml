
@{
    ViewBag.Title = "CORS Fox Biz Service Client";
}

<h2><img src="~/Images/neodeex.png" style="align-content:center" />&nbsp;Cross-Doamin Request to Fox Biz Service Example</h2>

<div>
    <p>
        CORS(Cross-Origin Resource Sharing)를 지원하지 않는 Fox Biz Service 호출. Cross-Domain 문제로 인해 서비스 호출이 실패 합니다.<br />
        <input type="button" value="Non-CORS Biz Service 호출" onclick="sendRequest('http://localhost:7505/api/bizservice', 'result1')" />
        <span id='result1' style="font-weight: bold"></span>
<p />
    <ul>
        <li>Fox Biz Service는 기본적으로 CORS를 지원하지 않습니다.</li>
        <li>따라서, Fox Biz Service 자바 스크립트 클라이언의 Cross-Domain(cross-site) XmlHttpRequest 요청이 실패 합니다.</li>
    </ul>
    <hr />
    <p>
        CORS를 지원하는 Fox Biz Service 호출. 서비스 호출이 성공합니다.<br />
        <input type="button" value="CORS Biz Service 호출" onclick="sendRequest('http://localhost:7505/api/cors/bizservice', 'result2')" />
        <span id='result2' style="font-weight: bold"></span>
    <p />
    <ul>
        <li>CORS를 지원하기 위해서는 Fox Biz Service를 호스팅하는 웹 어플리케이션에 Microsoft.AspNet.WebApi.Cors 패키지를 NuGet에서 추가합니다.</li>
        <li>WebApiConfig.cs 파일에서 config.EnableCors() 메서드 호출을 추가 합니다.
<pre>
    public static void Register(HttpConfiguration config)
    {
        // Web API configuration and services

        <b style="background-color:yellow">// CORS 기능 활성화
        config.EnableCors();</b>
        // Web API routes
        config.MapHttpAttributeRoutes();

        ......
    }
</pre>
        </li>
        <li>FoxBizServiceController 클래스에서 파생된 Controller 클래스를 추가 합니다.</li>
        <li>추가된 Controller 클래스에 EnableCorsAttribute 특성을 추가하고 적설한 설정을 수행합니다.
<pre>
    <b style="background-color:yellow">[EnableCors(origins: "http://localhost:7512,http://localhost.fiddler:7512", headers: "*", methods: "*")]</b>
    public class CorsBizServiceController : TheOne.ServiceModel.Web.Http.Controllers.FoxBizServiceController
    {
    // 구현할 내용이 전혀 없습니다.
    }
</pre>
        </li>
        <li>추가된 Controller를 위한 라우팅 설정을 WebApiConfig.cs에 추가합니다.
<pre>
    public static void Register(HttpConfiguration config)
    {
        ......

        // CORS를 지원하지 않는 Fox Biz Service 컨트롤러 라우팅
        config.Routes.MapHttpRoute(
            name: "FoxBizService",
            routeTemplate: "api/bizservice/{action}",
            defaults: new { controller = "FoxBizService" }
        );

        <b style="background-color:yellow">// CORS를 지원하는 Fox Biz Service 컨트롤러 라우팅
        config.Routes.MapHttpRoute(
            name: "CorsFoxBizService",
            routeTemplate: "api/cors/bizservice/{action}",
            defaults: new { controller = "CorsBizService" }
        );</b>
    }
</pre>       
        </li>
        <li>참고 자료 : <a href="https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/enabling-cross-origin-requests-in-web-api" target="_blank">Enable cross-origin requests in ASP.NET Web API</a></li>
        <li>Fox Data Service 역시 동일한 방법으로 CORS 적용이 가능합니다.</li>
    </ul>
</div>

<script src="~/Scripts/FoxRestClient.js"></script>
<script>
    // BIZ 서비스 호출
    function sendRequest(serviceUrl, resultElementName) {
        var client = new FoxRestBizClient(serviceUrl);
        var request = new FoxBizRequest();
        request.classId = "ServiceWeb.Biz.BizClass";
        request.methodId = "Echo"
        request.parameters.str = "test message";
        client.execute(request,
            function (response) {
                var element = document.getElementById(resultElementName);
                element.innerText = response.result.value;
            },
            function (errorInfo) {
                var element = document.getElementById(resultElementName);
                if (errorInfo != null) {
                    element.innerText = "Error: " + errorInfo.Message;
                }
            });
    }
</script>
